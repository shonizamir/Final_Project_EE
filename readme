
This repository contains:

1. SepFormer :
    - sepFormer_Separation.py : Our code for seprating mixed files using SepFormer
2. UniAudio :
    - scps_creation_for_spex.py : Our creation script of the 3 data preparation files for speach extraction task (noisy, clean, prompts)
    - SE_run_file_example.sh : UniAudio's initial running file, used to call all relevant preparation + training + reference scripts. This was modified to fit our speech enhancement task 
    - SPEX_run_file_example.sh : Same as before, modified to fit our targeted speech extraction task 
    - sepFormer_noise_test.scp : Example for a preparation file (noisy input for sepFormer - test batch)
    - sepFormer_wav_test.scp : Example for a preparation file (clean reference for sepFormer - test batch)
    - results_spex.py: A script that calculates the measurments for the TSE
    - Simplex-results.py: A script that calculates the measurments (simplex vs GT and teh models output vs GT). This is used on Simplex inference.
    - SepFormer-results.py: A script that calculates the measurments (SepFormer vs GT and teh models output vs GT). This is used on SepFormer inference.
3. UniAudio1.5 :
    - uniaudio1.5_sepForemer_tsv_example_denoising : Example for a file given to uniAudio1.5 containing paths for "noisy" sepFormer audio vs clean audio
    - denoising_task.py: The denoising task script meant to preform the in context learning of UniAudio 1.5
4. Simplex :
    - simplex_main.py : main file for simplex code, slightly changed to separate our speakers
5. Audio Example: 
    Consists of 5 folders of the experiments made. 
    - clean.wav : clean file of one  of the speakers, considered as ground truth
    - noisy_input.wav : the input given to the model to separate/enhance
    - output.wav : Model's output 
    - prompt.wav : only in TSE task, the prompt of the speaker we want to extract 
6. measurements:  A script for calculating measurements


